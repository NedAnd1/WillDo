import { Component } from '@angular/core';

@Component({
	selector: 'app-root',
	template: `
		<ion-header>
			<ion-toolbar>
				<ion-buttons slot="start">
					<ion-menu-button></ion-menu-button>
					<ion-back-button></ion-back-button>
				</ion-buttons>
				<ion-title>WillDo</ion-title>
			</ion-toolbar>
		</ion-header>
		<ion-split-pane when="md" contentId="mainView">
			<ion-menu contentId="mainView">
				<group-list>
				</group-list>
			</ion-menu>
			<ion-content id="mainView">
				<!-- Note: ion-content creates the main, scrollable view of the application -->

				<router-outlet>
					<!-- this router outlet switches between groups -->
					
					<!--task-list>
						< !-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -- >
						< !-- 'task-list' is list of tasks in any kind of context i.e. different groups -- >
						< !--               (  see  'app/tasks/task-list.component.ts'  )               -- >
						< !-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -- >
					</task-list-->
				</router-outlet>				

			</ion-content>
		</ion-split-pane>
	`,
	styles: [`
		ion-split-pane {
			margin-top: 56px;
		}
	`]
})
export class AppComponent
{
	title= 'WillDo';
}



import { Type } from '@angular/core';
import { Location } from '@angular/common';
import { PopoverController, ModalController } from '@ionic/angular';
import { Subject } from 'rxjs';
import { ActivatedRoute } from '@angular/router';
/** Loads the given component in a context most friendly for the current screen */
export class DynamicView
{
	/** retrieves or generates a dynamic view of this component */
	static get(componentClass: Type<any>): Type<any> {
		var base= this.map.get(componentClass);
		if ( ! base )
			this.map.set(componentClass, base= this.generate(componentClass));
		return base;
	}

	private static generate(component: Type<any>) {
		@Component({template:``})
		class dynamicClass
		{
			constructor(
				private location: Location,
				private modalController: ModalController,
				private activatedRoute: ActivatedRoute
			)
			{
				this.showInModal();
			}

			private async showInModal()
			{
				let modal= await this.modalController.create( { component: component, componentProps: { activatedRoute: this.activatedRoute } } );
				modal.present(); // show the model
				modal.onWillDismiss().then( (e) => e.role == 'url' || this.location.back() ); // go backwards when the view is closed
				this.location.onUrlChange( () => modal && modal.dismiss(modal= null, 'url') )
			}
		}
		return dynamicClass;
	}

	/** retrieves all the components given to this class to be placed in a dynamic context */
	public static getUserComponents(): Type<any>[] {
		return Array.from( this.map.keys() );
	}

	/** retrieves all dynamic views generated by this class */
	public static getGeneratedComponents(): Type<any>[] {
		return Array.from( this.map.values() );
	}

	/** stores the components used by and generated by DynamicView  */
	private static readonly map= new Map< Type<any>, Type<any> >();
}